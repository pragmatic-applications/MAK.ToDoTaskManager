// <auto-generated />
using System;
using Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace MAK.Lib.ToDoTaskManager.Database.Database.Migrations.ApplicationDbContextMigrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.8");

            modelBuilder.Entity("Database.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("City")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FirstName")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .HasColumnType("TEXT");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("Occupation")
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Domain.ToDoTask", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Complete")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Detail")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Image")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("ToDoTaskCategoryId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ToDoTaskCategoryId");

                    b.ToTable("ToDoTasks");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Complete = false,
                            CreatedDate = new DateTimeOffset(new DateTime(2021, 9, 4, 15, 24, 54, 883, DateTimeKind.Unspecified).AddTicks(5646), new TimeSpan(0, 0, 0, 0, 0)),
                            Detail = "Detail 1",
                            Image = "https://localhost:5551/Images/UploadFiles/Default.png",
                            Title = "Title 1",
                            ToDoTaskCategoryId = 1
                        },
                        new
                        {
                            Id = 2,
                            Complete = false,
                            CreatedDate = new DateTimeOffset(new DateTime(2021, 9, 4, 15, 24, 54, 883, DateTimeKind.Unspecified).AddTicks(7406), new TimeSpan(0, 0, 0, 0, 0)),
                            Detail = "Detail 2",
                            Image = "https://localhost:5551/Images/UploadFiles/Default.png",
                            Title = "Title 2",
                            ToDoTaskCategoryId = 2
                        },
                        new
                        {
                            Id = 3,
                            Complete = false,
                            CreatedDate = new DateTimeOffset(new DateTime(2021, 9, 4, 15, 24, 54, 883, DateTimeKind.Unspecified).AddTicks(7420), new TimeSpan(0, 0, 0, 0, 0)),
                            Detail = "Detail 3",
                            Image = "https://localhost:5551/Images/UploadFiles/Default.png",
                            Title = "Title 3",
                            ToDoTaskCategoryId = 1
                        },
                        new
                        {
                            Id = 4,
                            Complete = false,
                            CreatedDate = new DateTimeOffset(new DateTime(2021, 9, 4, 15, 24, 54, 883, DateTimeKind.Unspecified).AddTicks(7424), new TimeSpan(0, 0, 0, 0, 0)),
                            Detail = "Detail 4",
                            Image = "https://localhost:5551/Images/UploadFiles/Default.png",
                            Title = "Title 4",
                            ToDoTaskCategoryId = 3
                        },
                        new
                        {
                            Id = 5,
                            Complete = false,
                            CreatedDate = new DateTimeOffset(new DateTime(2021, 9, 4, 15, 24, 54, 883, DateTimeKind.Unspecified).AddTicks(7428), new TimeSpan(0, 0, 0, 0, 0)),
                            Detail = "Detail 5",
                            Image = "https://localhost:5551/Images/UploadFiles/Default.png",
                            Title = "Title 5",
                            ToDoTaskCategoryId = 1
                        },
                        new
                        {
                            Id = 6,
                            Complete = false,
                            CreatedDate = new DateTimeOffset(new DateTime(2021, 9, 4, 15, 24, 54, 883, DateTimeKind.Unspecified).AddTicks(7433), new TimeSpan(0, 0, 0, 0, 0)),
                            Detail = "Detail 6",
                            Image = "https://localhost:5551/Images/UploadFiles/Default.png",
                            Title = "Title 6",
                            ToDoTaskCategoryId = 3
                        },
                        new
                        {
                            Id = 7,
                            Complete = false,
                            CreatedDate = new DateTimeOffset(new DateTime(2021, 9, 4, 15, 24, 54, 883, DateTimeKind.Unspecified).AddTicks(7436), new TimeSpan(0, 0, 0, 0, 0)),
                            Detail = "Detail 7",
                            Image = "https://localhost:5551/Images/UploadFiles/Default.png",
                            Title = "Title 7",
                            ToDoTaskCategoryId = 2
                        },
                        new
                        {
                            Id = 8,
                            Complete = false,
                            CreatedDate = new DateTimeOffset(new DateTime(2021, 9, 4, 15, 24, 54, 883, DateTimeKind.Unspecified).AddTicks(7439), new TimeSpan(0, 0, 0, 0, 0)),
                            Detail = "Detail 8",
                            Image = "https://localhost:5551/Images/UploadFiles/Default.png",
                            Title = "Title 8",
                            ToDoTaskCategoryId = 1
                        },
                        new
                        {
                            Id = 9,
                            Complete = false,
                            CreatedDate = new DateTimeOffset(new DateTime(2021, 9, 4, 15, 24, 54, 883, DateTimeKind.Unspecified).AddTicks(7442), new TimeSpan(0, 0, 0, 0, 0)),
                            Detail = "Detail 9",
                            Image = "https://localhost:5551/Images/UploadFiles/Default.png",
                            Title = "Title 9",
                            ToDoTaskCategoryId = 3
                        },
                        new
                        {
                            Id = 10,
                            Complete = false,
                            CreatedDate = new DateTimeOffset(new DateTime(2021, 9, 4, 15, 24, 54, 883, DateTimeKind.Unspecified).AddTicks(7446), new TimeSpan(0, 0, 0, 0, 0)),
                            Detail = "Detail 10",
                            Image = "https://localhost:5551/Images/UploadFiles/Default.png",
                            Title = "Title 10",
                            ToDoTaskCategoryId = 1
                        },
                        new
                        {
                            Id = 11,
                            Complete = false,
                            CreatedDate = new DateTimeOffset(new DateTime(2021, 9, 4, 15, 24, 54, 883, DateTimeKind.Unspecified).AddTicks(7449), new TimeSpan(0, 0, 0, 0, 0)),
                            Detail = "Detail 11",
                            Image = "https://localhost:5551/Images/UploadFiles/Default.png",
                            Title = "Title 11",
                            ToDoTaskCategoryId = 2
                        },
                        new
                        {
                            Id = 12,
                            Complete = false,
                            CreatedDate = new DateTimeOffset(new DateTime(2021, 9, 4, 15, 24, 54, 883, DateTimeKind.Unspecified).AddTicks(7452), new TimeSpan(0, 0, 0, 0, 0)),
                            Detail = "Detail 12",
                            Image = "https://localhost:5551/Images/UploadFiles/Default.png",
                            Title = "Title 12",
                            ToDoTaskCategoryId = 2
                        },
                        new
                        {
                            Id = 13,
                            Complete = false,
                            CreatedDate = new DateTimeOffset(new DateTime(2021, 9, 4, 15, 24, 54, 883, DateTimeKind.Unspecified).AddTicks(7455), new TimeSpan(0, 0, 0, 0, 0)),
                            Detail = "Detail 13",
                            Image = "https://localhost:5551/Images/UploadFiles/Default.png",
                            Title = "Title 13",
                            ToDoTaskCategoryId = 1
                        },
                        new
                        {
                            Id = 14,
                            Complete = false,
                            CreatedDate = new DateTimeOffset(new DateTime(2021, 9, 4, 15, 24, 54, 883, DateTimeKind.Unspecified).AddTicks(7457), new TimeSpan(0, 0, 0, 0, 0)),
                            Detail = "Detail 14",
                            Image = "https://localhost:5551/Images/UploadFiles/Default.png",
                            Title = "Title 14",
                            ToDoTaskCategoryId = 3
                        },
                        new
                        {
                            Id = 15,
                            Complete = false,
                            CreatedDate = new DateTimeOffset(new DateTime(2021, 9, 4, 15, 24, 54, 883, DateTimeKind.Unspecified).AddTicks(7460), new TimeSpan(0, 0, 0, 0, 0)),
                            Detail = "Detail 15",
                            Image = "https://localhost:5551/Images/UploadFiles/Default.png",
                            Title = "Title 15",
                            ToDoTaskCategoryId = 1
                        },
                        new
                        {
                            Id = 16,
                            Complete = false,
                            CreatedDate = new DateTimeOffset(new DateTime(2021, 9, 4, 15, 24, 54, 883, DateTimeKind.Unspecified).AddTicks(7509), new TimeSpan(0, 0, 0, 0, 0)),
                            Detail = "Detail 16",
                            Image = "https://localhost:5551/Images/UploadFiles/Default.png",
                            Title = "Title 16",
                            ToDoTaskCategoryId = 2
                        });
                });

            modelBuilder.Entity("Domain.ToDoTaskCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("ToDoTaskCategories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Unspecified"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Important"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Urgent"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "1",
                            ConcurrencyStamp = "b8e3d9da-3acd-4402-802b-d52699519b7c",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "2",
                            ConcurrencyStamp = "dfce050d-99de-44fd-825d-991fc1ad1f74",
                            Name = "SuperAdmin",
                            NormalizedName = "SUPERADMIN"
                        },
                        new
                        {
                            Id = "3",
                            ConcurrencyStamp = "3772fc39-c65a-4c9b-889d-fcfaab735add",
                            Name = "Editor",
                            NormalizedName = "EDITOR"
                        },
                        new
                        {
                            Id = "4",
                            ConcurrencyStamp = "e60c6a3b-e908-47fa-bdef-f4026574fc63",
                            Name = "RegularUser",
                            NormalizedName = "REGULARUSER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Domain.ToDoTask", b =>
                {
                    b.HasOne("Domain.ToDoTaskCategory", "ToDoTaskCategory")
                        .WithMany("ToDoTasks")
                        .HasForeignKey("ToDoTaskCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ToDoTaskCategory");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Database.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Database.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Database.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Database.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.ToDoTaskCategory", b =>
                {
                    b.Navigation("ToDoTasks");
                });
#pragma warning restore 612, 618
        }
    }
}
